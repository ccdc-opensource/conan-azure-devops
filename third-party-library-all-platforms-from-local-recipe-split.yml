parameters:
  - name: package
    type: string
  - name: package_version
    type: string
  - name: user
    type: string
    default: ccdc
  - name: channel
    type: string
    default: testing
  - name: artifactory_api_key
    type: string
    default: ''
  - name: build_types
    type: object
    default:
      - Release
      - Debug
      - RelWithDebInfo
  - name: destination_repository
    type: string
    default: ccdc-3rdparty-conan
  - name: platforms
    type: object
    default:
      - centos7_gcc9
      - centos7_gcc10
      - ubuntu2004_gcc10
      - macos1015_xcode11
      - win2019_vs2019
      # - win2019_msys (this is used for building a few buildtools)
  - name: macos_deployment_target
    type: string
    default: '10.13'
  - name: macos_brew_preinstall
    type: object
    default: []
  - name: macos_xcode_version
    type: string
    default: '11.7'
  - name: centos_yum_preinstall
    type: object
    default: []
  - name: windows_bash_path
    type: string
    default: 'NOT VALID UNLESS SET, ONLY USED BY WINDOWS BUILDS'
  - name: conan_logging_level
    type: string
    default: 'critical'
  # see https://github.com/conan-io/conan/issues/6514
  - name: workaround_autotools_windows_debug_issue
    type: boolean
    default: false
  - name: artifactory_service_connection
    type: string
    default: 'devops-ccdc-3rd-party'
  - name: use_release_zlib_profile
    type: boolean
    default: false

jobs:
- ${{ if containsValue(parameters.platforms, 'centos7_gcc9') }}:
  - ${{ each build_type in parameters.build_types }}: # Each build_type
    - job: centos7_gcc9_${{ build_type }}
      pool:
        vmImage: "ubuntu-latest"
      # We use a container to run the build as we must be compatible with centos7's older glibc
      container: rockdreamer/centos7-gcc9:latest
      steps:
        # No need to setup specific python, the container's python3 will be used
        - ${{ each preinstall_pkg in parameters.centos_yum_preinstall }}: # package
          - task: CmdLine@2
            inputs:
              script: "sudo yum install -y ${{ preinstall_pkg }}"
            displayName: "yum install ${{ preinstall_pkg }}"
        - template: single-local-recipe-build.yml@templates
          parameters:
            python: 'python3'
            package: ${{ parameters.package }}
            package_version: ${{ parameters.package_version }}
            user: ${{ parameters.user }}
            channel: ${{ parameters.channel }}
            profile: centos7-gcc9-x86_64
            artifactory_api_key: ${{ parameters.artifactory_api_key }}
            build_types:
              - ${{ build_type }}
            destination_repository: ${{ parameters.destination_repository }}
            conan_logging_level: ${{ parameters.conan_logging_level }}
            artifactory_service_connection: ${{ parameters.artifactory_service_connection }}
            use_release_zlib_profile: ${{ parameters.use_release_zlib_profile }}

- ${{ if containsValue(parameters.platforms, 'centos7_gcc10') }}:
  - ${{ each build_type in parameters.build_types }}: # Each build_type
    - job: centos7_gcc10_${{ build_type }}
      pool:
        vmImage: "ubuntu-latest"
      # We use a container to run the build as we must be compatible with centos7's older glibc
      container: rockdreamer/centos7-gcc10:latest
      steps:
        # No need to setup specific python, the container's python3 will be used
        - ${{ each preinstall_pkg in parameters.centos_yum_preinstall }}: # package
          - task: CmdLine@2
            inputs:
              script: "sudo yum install -y ${{ preinstall_pkg }}"
            displayName: "yum install ${{ preinstall_pkg }}"
        - template: single-local-recipe-build.yml@templates
          parameters:
            python: 'python3'
            package: ${{ parameters.package }}
            package_version: ${{ parameters.package_version }}
            user: ${{ parameters.user }}
            channel: ${{ parameters.channel }}
            profile: centos7-gcc10-x86_64
            artifactory_api_key: ${{ parameters.artifactory_api_key }}
            build_types:
              - ${{ build_type }}
            destination_repository: ${{ parameters.destination_repository }}
            conan_logging_level: ${{ parameters.conan_logging_level }}
            artifactory_service_connection: ${{ parameters.artifactory_service_connection }}
            use_release_zlib_profile: ${{ parameters.use_release_zlib_profile }}

- ${{ if containsValue(parameters.platforms, 'ubuntu2004_gcc10') }}:
  - ${{ each build_type in parameters.build_types }}: # Each build_type
    - job: ubuntu2004_gcc10_${{ build_type }}
      pool:
        vmImage: "ubuntu-latest"
      # We use a container to run the build as we must be compatible with centos7's older glibc
      container: rockdreamer/ubuntu20-gcc10:latest
      steps:
        # No need to setup specific python, the container's python3 will be used
        - template: single-local-recipe-build.yml@templates
          parameters:
            python: 'python3'
            package: ${{ parameters.package }}
            package_version: ${{ parameters.package_version }}
            user: ${{ parameters.user }}
            channel: ${{ parameters.channel }}
            profile: ubuntu20-gcc10-x86_64
            artifactory_api_key: ${{ parameters.artifactory_api_key }}
            build_types:
              - ${{ build_type }}
            destination_repository: ${{ parameters.destination_repository }}
            conan_logging_level: ${{ parameters.conan_logging_level }}
            artifactory_service_connection: ${{ parameters.artifactory_service_connection }}
            use_release_zlib_profile: ${{ parameters.use_release_zlib_profile }}

- ${{ if containsValue(parameters.platforms, 'macos1015_xcode11') }}:
  - ${{ each build_type in parameters.build_types }}: # Each build_type
    - job: macos1015_xcode11_${{ build_type }}
      pool:
        vmImage: "macOS-latest"
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: "3.8"
          displayName: "Use latest python 3.8"
        - ${{ each preinstall_pkg in parameters.macos_brew_preinstall }}: # package
          - task: CmdLine@2
            inputs:
              script: "brew install ${{ preinstall_pkg }}"
            displayName: "Brew install ${{ preinstall_pkg }}"
        - task: CmdLine@2
          inputs:
            script: "sudo xcode-select -s /Applications/Xcode_${{ parameters.macos_xcode_version }}.app/Contents/Developer"
          displayName: "Select XCode ${{ parameters.macos_xcode_version }}"
        - template: single-local-recipe-build.yml@templates
          parameters:
            python: 'python'
            package: ${{ parameters.package }}
            package_version: ${{ parameters.package_version }}
            user: ${{ parameters.user }}
            channel: ${{ parameters.channel }}
            artifactory_api_key: ${{ parameters.artifactory_api_key }}
            profile: macos-xcode11-x86_64
            build_types:
              - ${{ build_type }}
            destination_repository: ${{ parameters.destination_repository }}
            macos_deployment_target: ${{ parameters.macos_deployment_target }}
            conan_logging_level: ${{ parameters.conan_logging_level }}
            artifactory_service_connection: ${{ parameters.artifactory_service_connection }}
            use_release_zlib_profile: ${{ parameters.use_release_zlib_profile }}

- ${{ if containsValue(parameters.platforms, 'win2019_vs2019') }}:
  - ${{ each build_type in parameters.build_types }}: # Each build_type
    - job: win2019_vs2019_${{ build_type }}
      pool:
        vmImage: "windows-2019"
      steps:
        - template: remove-interfering-tools-on-windows.yml@templates
        - task: UsePythonVersion@0
          inputs:
            versionSpec: "3.8"
          displayName: "Use latest python 3.8"
        - template: single-local-recipe-build.yml@templates
          parameters:
            python: 'python'
            package: ${{ parameters.package }}
            package_version: ${{ parameters.package_version }}
            user: ${{ parameters.user }}
            channel: ${{ parameters.channel }}
            artifactory_api_key: ${{ parameters.artifactory_api_key }}
            profile: windows-msvc16-amd64
            build_types:
              - ${{ build_type }}
            destination_repository: ${{ parameters.destination_repository }}
            conan_logging_level: ${{ parameters.conan_logging_level }}
            workaround_autotools_windows_debug_issue: ${{ parameters.workaround_autotools_windows_debug_issue }}
            artifactory_service_connection: ${{ parameters.artifactory_service_connection }}
            use_release_zlib_profile: ${{ parameters.use_release_zlib_profile }}

- ${{ if containsValue(parameters.platforms, 'win2019_msys') }}:
  - ${{ each build_type in parameters.build_types }}: # Each build_type
    - job: win2019_msys_${{ build_type }}
      pool:
        vmImage: "windows-2019"
      steps:
        - template: remove-interfering-tools-on-windows.yml@templates
        - task: UsePythonVersion@0
          inputs:
            versionSpec: "3.8"
          displayName: "Use latest python 3.8"
        - template: single-local-recipe-build.yml@templates
          parameters:
            python: 'python'
            package: ${{ parameters.package }}
            package_version: ${{ parameters.package_version }}
            user: ${{ parameters.user }}
            channel: ${{ parameters.channel }}
            artifactory_api_key: ${{ parameters.artifactory_api_key }}
            profile: windows-msys-amd64
            build_types:
              - ${{ build_type }}
            destination_repository: ${{ parameters.destination_repository }}
            conan_logging_level: ${{ parameters.conan_logging_level }}
            workaround_autotools_windows_debug_issue: ${{ parameters.workaround_autotools_windows_debug_issue }}
            artifactory_service_connection: ${{ parameters.artifactory_service_connection }}
            use_release_zlib_profile: ${{ parameters.use_release_zlib_profile }}
