parameters:
  - name: python
    type: string
  - name: package
    type: string
  - name: package_version
    type: string
  - name: user
    type: string
  - name: channel
    type: string
  - name: profile
    type: string
  - name: build_types
    type: object
  - name: source_repository
    type: string
  - name: destination_repository
    type: string
  - name: macos_deployment_target
    type: string
    default: 'NOT VALID UNLESS SET, ONLY USED BY MACOS BUILDS'
  - name: windows_bash_path
    type: string
    default: 'NOT VALID UNLESS SET, ONLY USED BY WINDOWS BUILDS'
  - name: conan_logging_level
    type: string

steps:
- script: ${{ parameters.python }} -m pip install --upgrade conan
  displayName: 'Install conan'

- task: PythonScript@0
  displayName: Get path without git bash
  inputs:
    scriptSource: 'inline'
    pythonInterpreter: ${{ parameters.python }}
    script: |
      import os
      import collections
      p = os.environ['PATH']
      e = collections.OrderedDict(sorted(os.environ.items()))
      for k, v in e.items():
          if k == 'PATH':
              print('Path is:')
              for pi in v.split(os.pathsep):
                  print(f'  - {pi}')
          else:
              print(f'{k}={v}')
      p = os.pathsep.join([ x for x in os.environ['BADPATH'].split(os.pathsep) if 'Git' not in x])
      print(f'##vso[task.setvariable variable=path_without_git_bash;]{p}')
      #print(f'##vso[task.setvariable variable=PATH;]{p}')

- task: PythonScript@0
  displayName: Display new path
  inputs:
    scriptSource: 'inline'
    pythonInterpreter: ${{ parameters.python }}
    script: |
      import os
      print('Path is:')
      for pi in os.environ['PATH'].split(os.pathsep):
          print(f'  - {pi}')
  env:
    PATH: '$(path_without_git_bash)'

- task: ArtifactoryGenericDownload@3
  displayName: 'Download configuration'
  inputs:
    connection: 'devops-ccdc-3rd-party'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "ccdc-conan-metadata/common-3rdparty-config.zip",
            "target": "$(Pipeline.Workspace)/.conan/"
          }
        ]
      }
    failNoOp: true

- task: ArtifactoryConan@1
  displayName: 'Install configuration'
  inputs:
    conanCommand: 'Config Install'
    configSourceType: 'zip'
    configZipPath: '$(Pipeline.Workspace)/.conan/common-3rdparty-config.zip'
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  env:
    CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

- task: ArtifactoryConan@1
  displayName: 'Use ${{ parameters.destination_repository }}'
  inputs:
    conanCommand: 'Add Remote'
    remoteName: '${{ parameters.destination_repository }}'
    artifactoryService: 'devops-ccdc-3rd-party'
    conanRepo: '${{ parameters.destination_repository }}'
    purgeExistingRemotes: true
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  env:
    CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

- task: ArtifactoryConan@1
  displayName: 'Use ${{ parameters.source_repository }}'
  inputs:
    conanCommand: 'Add Remote'
    remoteName: '${{ parameters.source_repository }}'
    artifactoryService: 'devops-ccdc-3rd-party'
    conanRepo: '${{ parameters.source_repository }}'
    purgeExistingRemotes: false
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  env:
    CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

# Download just this package from the source repository, dependencies must already be built in the destination
- task: ArtifactoryConan@1
  displayName: 'Download ${{ parameters.package }}/${{ parameters.package_version }}@'
  inputs:
    conanCommand: 'Custom'
    customArguments: 'download ${{ parameters.package }}/${{ parameters.package_version }}@ --remote=${{ parameters.source_repository }} --recipe'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  env:
    CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

- ${{ each build_type in parameters.build_types }}: # Each build_type
  - task: ArtifactoryConan@1
    displayName: 'Build ${{ parameters.package }} in ${{ build_type }} mode'
    inputs:
      conanCommand: 'Install'
      pathOrReference: '${{ parameters.package }}/${{ parameters.package_version }}@'
      # We build a single package, on purpose, dependencies must be tracked
      ${{ if contains(parameters.profile, 'windows') }}:
        ${{ if eq(build_type, 'Debug') }}:
          extraArguments: '--profile ${{ parameters.profile }}-debug --remote=${{ parameters.destination_repository }} --build=${{ parameters.package }} -s build_type=${{ build_type }}'
        ${{ if ne(build_type, 'Debug') }}:
          extraArguments: '--profile ${{ parameters.profile }}-release --remote=${{ parameters.destination_repository }} --build=${{ parameters.package }} -s build_type=${{ build_type }}'
      ${{ if not(contains(parameters.profile, 'windows')) }}:
        extraArguments: '--profile ${{ parameters.profile }} --remote=${{ parameters.destination_repository }} --build=${{ parameters.package }} -s build_type=${{ build_type }}'
      buildName: '$(Build.DefinitionName)'
      buildNumber: '$(Build.BuildNumber)'
      conanUserHome: '$(Pipeline.Workspace)/.conan'
    ${{ if contains(parameters.profile, 'macos') }}:
      env:
        MACOSX_DEPLOYMENT_TARGET: '${{ parameters.macos_deployment_target }}'
        CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}
        CONAN_USER_HOME: '$(Pipeline.Workspace)/.conan'
    ${{ if contains(parameters.profile, 'windows') }}:
      env:
        PATH: '$(path_without_git_bash)'
        CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}
        ${{ if not(contains(parameters.windows_bash_path, 'NOT VALID')) }}:
          CONAN_BASH_PATH: '${{ parameters.windows_bash_path }}'
    ${{ if or(contains(parameters.profile, 'ubuntu'), contains(parameters.profile, 'centos')) }}:
      env:
        CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

- task: ArtifactoryConan@1
  displayName: 'Upload ${{ parameters.package }}/${{ parameters.package_version }}@'
  inputs:
    conanCommand: 'Upload'
    patternOrReference: '${{ parameters.package }}/${{ parameters.package_version }}@'
    extraArguments: '--all --remote=${{ parameters.destination_repository }}'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    conanUserHome: '$(Pipeline.Workspace)/.conan'
  env:
    CONAN_LOGGING_LEVEL: ${{ parameters.conan_logging_level }}

