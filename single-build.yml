parameters:
  - name: python
    type: string
  - name: package
    type: string
  - name: package_version
    type: string
  - name: user
    type: string
  - name: channel
    type: string
  - name: profile
    type: string
  - name: build_types
    type: object

steps:
- script: ${{ parameters.python }} -m pip install --upgrade conan
  displayName: 'Install conan'

- task: ArtifactoryGenericDownload@3
  displayName: 'Download configuration'
  inputs:
    connection: 'devops-ccdc-3rd-party'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "ccdc-conan-metadata/common-3rdparty-config.zip",
            "target": "$(Pipeline.Workspace)/.conan/"
          }
        ]
      }
    failNoOp: true

- task: ArtifactoryConan@1
  displayName: 'Install configuration'
  inputs:
    conanCommand: 'Config Install'
    configSourceType: 'zip'
    configZipPath: '$(Pipeline.Workspace)/.conan/common-3rdparty-config.zip'
    conanUserHome: '$(Pipeline.Workspace)/.conan'

- task: ArtifactoryConan@1
  displayName: 'Use ccdc-3rdparty-conan-mix'
  inputs:
    conanCommand: 'Add Remote'
    remoteName: 'ccdc-3rdparty-conan-mix'
    artifactoryService: 'devops-ccdc-3rd-party'
    conanRepo: 'ccdc-3rdparty-conan-mix'
    purgeExistingRemotes: true
    conanUserHome: '$(Pipeline.Workspace)/.conan'

- task: ArtifactoryConan@1
  displayName: 'Install ${{ parameters.package }}/${{ parameters.package_version }}@'
  inputs:
    conanCommand: 'Install'
    pathOrReference: '${{ parameters.package }}/${{ parameters.package_version }}@'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    conanUserHome: '$(Pipeline.Workspace)/.conan'
    
- task: ArtifactoryConan@1
  displayName: 'Copy to ${{ parameters.user }}/${{ parameters.channel }}'
  inputs:
    conanCommand: 'Custom'
    customArguments: 'copy ${{ parameters.package }}/${{ parameters.package_version }} ${{ parameters.user }}/${{ parameters.channel }}'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    conanUserHome: '$(Pipeline.Workspace)/.conan'

- ${{ each build_type in parameters.build_types }}: # Each build_type
  - task: ArtifactoryConan@1
    displayName: 'Build ${{ parameters.package }} in ${{ parameters.build_type }} mode'
    inputs:
      conanCommand: 'Install'
      pathOrReference: '${{ parameters.package }}/${{ parameters.package_version }}@${{ parameters.user }}/${{ parameters.channel }}'
      # We build a single package, on purpose, dependencies must be tracked
      extraArguments: '--profile ${{ parameters.profile }} --build=${{ parameters.package }} -s build_type=${{ parameters.build_type }}'
      buildName: '$(Build.DefinitionName)'
      buildNumber: '$(Build.BuildNumber)'
      conanUserHome: '$(Pipeline.Workspace)/.conan'

- task: ArtifactoryConan@1
  displayName: 'Upload ${{ parameters.package }}/${{ parameters.package_version }}@${{ parameters.user }}/${{ parameters.channel }}'
  inputs:
    conanCommand: 'Upload'
    patternOrReference: '${{ parameters.package }}/${{ parameters.package_version }}@${{ parameters.user }}/${{ parameters.channel }}'
    extraArguments: '--all'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    conanUserHome: '$(Pipeline.Workspace)/.conan'

